{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/myApi.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","Title","Plot","Poster","imdbID","className","src","alt","href","MoviesList","movies","length","map","movie","key","getMovie","title","url","fetch","options","then","res","json","catch","error","FindMovie","addNewMovie","useState","query","setQuery","newMovie","setNewMovie","movieAlreadyInList","setMovieAlreadyInList","setError","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","onClick","Response","find","disabled","classNames","App","setMovies","currentMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6f12984.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Plot = '',\n  Poster,\n  imdbID,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {Plot}\n        <br />\n        <a href={`https://www.imdb.com/title/${imdbID}/`}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.length === 0\n      ? <p>Please add your favorite movies</p>\n      : (movies.map(movie => (\n        <MovieCard key={movie.imdbID} {...movie} />\n      )))\n    }\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=dc986d28';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json())\n  .catch(error => error);\n\nexport const getMovie = title => request(`&t=[${title}]`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../myApi';\n\nexport const FindMovie = ({ movies, addNewMovie }) => {\n  const [query, setQuery] = useState('');\n  const [newMovie, setNewMovie] = useState();\n  const [movieAlreadyInList, setMovieAlreadyInList] = useState(false);\n  const [error, setError] = useState(false);\n\n  const checkMovieInList = () => {\n    if (movies.find(movie => movie.imdbID === newMovie.imdbID)) {\n      setMovieAlreadyInList(true);\n\n      return;\n    }\n\n    addNewMovie(newMovie);\n    setQuery('');\n  };\n\n  const handleChangeQuery = ({ target }) => {\n    setError(false);\n    setMovieAlreadyInList(false);\n    setQuery(target.value);\n    setNewMovie();\n  };\n\n  const findMovie = () => {\n    getMovie(query)\n      .then((movie) => {\n        if (movie.Response === 'False') {\n          setError(true);\n\n          return;\n        }\n\n        setError(false);\n        setNewMovie(movie);\n      });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n          {\n            error && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n          }\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={checkMovieInList}\n              disabled={!newMovie}\n            >\n              Add to the list\n            </button>\n            {movieAlreadyInList && (\n              <p className={classNames({ 'help is-danger': !error })}>\n                The movie already on the list\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n      <div className=\"container\">\n        {newMovie && (\n          <>\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard\n              Title={newMovie.Title}\n              Plot={newMovie.Plot}\n              Poster={newMovie.Poster}\n              imdbID={newMovie.imdbID}\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addNewMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      Title: PropTypes.string.isRequired,\n      Plot: PropTypes.string.isRequired,\n      Poster: PropTypes.string.isRequired,\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addNewMovie = (newMovie) => {\n    setMovies(currentMovie => [...currentMovie, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie movies={movies} addNewMovie={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}